name: Build and Publish Debian Package

on:
  release:
    types: [published]

jobs:
  build-deb:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Get release version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build binary using Docker (Debian 12 compatible)
      run: |
        # Create a temporary Dockerfile for building
        cat > Dockerfile.build << 'EOF'
        FROM rust:1.89-slim-bullseye AS builder

        WORKDIR /app

        RUN apt-get update && apt-get install -y \
            pkg-config \
            libssl-dev \
            cmake \
            && rm -rf /var/lib/apt/lists/*

        COPY Cargo.toml Cargo.lock* ./

        # Create a dummy main.rs to cache dependencies
        RUN mkdir src && echo "fn main() {}" > src/main.rs
        RUN cargo build --release && rm -rf src target/release/deps/http_proxy_rs*

        COPY src ./src

        RUN cargo build --release

        # Verify the binary works and check its dependencies
        RUN ls -la target/release/ && \
            file target/release/http-proxy-rs && \
            ldd target/release/http-proxy-rs
        EOF

    - name: Build Docker image and extract binary
      run: |
        # Build the Docker image
        docker build -f Dockerfile.build -t http-proxy-builder .
        
        # Create a container and copy the binary out
        docker create --name temp-container http-proxy-builder
        docker cp temp-container:/app/target/release/http-proxy-rs ./http-proxy-rs
        docker rm temp-container
        
        # Verify the extracted binary
        file ./http-proxy-rs
        chmod +x ./http-proxy-rs
        
        # Check what glibc version it's linked against
        echo "Checking glibc compatibility:"
        objdump -T ./http-proxy-rs | grep GLIBC | sort -u || true

    - name: Create Debian package structure
      run: |
        mkdir -p pkg/DEBIAN
        mkdir -p pkg/usr/local/bin
        mkdir -p pkg/etc/http-proxy-rs
        mkdir -p pkg/lib/systemd/system
        mkdir -p pkg/usr/share/doc/http-proxy-rs

    - name: Copy binary
      run: |
        cp ./http-proxy-rs pkg/usr/local/bin/
        chmod 755 pkg/usr/local/bin/http-proxy-rs

    - name: Copy configuration
      run: |
        cp config.json pkg/etc/http-proxy-rs/config.json
        chmod 644 pkg/etc/http-proxy-rs/config.json

    - name: Create systemd service file
      run: |
        cat > pkg/lib/systemd/system/http-proxy-rs.service << 'EOF'
        [Unit]
        Description=HTTP Proxy RS - Minimal proxy for serving and caching web content
        After=network.target
        Wants=network.target

        [Service]
        Type=simple
        User=http-proxy-rs
        Group=http-proxy-rs
        WorkingDirectory=/etc/http-proxy-rs
        ExecStart=/usr/local/bin/http-proxy-rs --listen 0.0.0.0:8080 --config /etc/http-proxy-rs/config.json
        Restart=always
        RestartSec=5
        Environment=RUST_LOG=info
        Environment=RUST_BACKTRACE=1

        # Security settings
        NoNewPrivileges=true
        PrivateTmp=true
        ProtectSystem=strict
        ProtectHome=true
        ReadWritePaths=/var/log/http-proxy-rs
        CapabilityBoundingSet=CAP_NET_BIND_SERVICE
        AmbientCapabilities=CAP_NET_BIND_SERVICE

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Create documentation
      run: |
        cat > pkg/usr/share/doc/http-proxy-rs/README << 'EOF'
        HTTP Proxy RS
        =============

        A minimal proxy server for serving and caching web content that may be 
        blocked by tracking protection or CORS policies.

        Configuration:
        - Main config: /etc/http-proxy-rs/config.json
        - Service: systemctl start http-proxy-rs
        - Logs: journalctl -u http-proxy-rs

        Usage:
        - Direct: /usr/local/bin/http-proxy-rs --help
        - Service: systemctl enable --now http-proxy-rs

        For more information, visit the project repository.
        EOF

    - name: Copy license
      run: cp LICENSE pkg/usr/share/doc/http-proxy-rs/copyright

    - name: Create postinstall script
      run: |
        cat > pkg/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        set -e

        # Create user and group
        if ! getent group http-proxy-rs >/dev/null 2>&1; then
            groupadd --system http-proxy-rs
        fi

        if ! getent passwd http-proxy-rs >/dev/null 2>&1; then
            useradd --system --gid http-proxy-rs --home-dir /var/lib/http-proxy-rs \
                    --shell /bin/false --comment "HTTP Proxy RS daemon" http-proxy-rs
        fi

        # Create log directory
        mkdir -p /var/log/http-proxy-rs
        chown http-proxy-rs:http-proxy-rs /var/log/http-proxy-rs
        chmod 755 /var/log/http-proxy-rs

        # Reload systemd
        systemctl daemon-reload

        # Enable and start service
        systemctl enable http-proxy-rs.service

        echo "HTTP Proxy RS installed successfully!"
        echo "Start with: sudo systemctl start http-proxy-rs"
        echo "View logs: sudo journalctl -u http-proxy-rs -f"
        echo "Config at: /etc/http-proxy-rs/config.json"
        EOF

        chmod 755 pkg/DEBIAN/postinst

    - name: Create preremove script
      run: |
        cat > pkg/DEBIAN/prerm << 'EOF'
        #!/bin/bash
        set -e

        # Stop and disable service
        systemctl stop http-proxy-rs.service || true
        systemctl disable http-proxy-rs.service || true
        EOF

        chmod 755 pkg/DEBIAN/prerm

    - name: Create postremove script
      run: |
        cat > pkg/DEBIAN/postrm << 'EOF'
        #!/bin/bash
        set -e

        case "$1" in
            purge)
                # Remove user and group
                userdel http-proxy-rs 2>/dev/null || true
                groupdel http-proxy-rs 2>/dev/null || true
                
                # Remove log directory
                rm -rf /var/log/http-proxy-rs
                
                # Remove config directory if empty
                rmdir /etc/http-proxy-rs 2>/dev/null || true
                ;;
        esac

        # Reload systemd
        systemctl daemon-reload || true
        EOF

        chmod 755 pkg/DEBIAN/postrm

    - name: Create Debian control file
      run: |
        cat > pkg/DEBIAN/control << EOF
        Package: http-proxy-rs
        Version: ${{ steps.get_version.outputs.VERSION }}
        Section: web
        Priority: optional
        Architecture: amd64
        Depends: libc6 (>= 2.31), libssl1.1 | libssl3, ca-certificates
        Maintainer: Thomas Q <noreply@github.com>
        Description: Minimal proxy for serving and caching web content
         HTTP Proxy RS is a minimal proxy server built in Rust that helps serve
         and cache web content that may be blocked by tracking protection or
         CORS policies. It includes features like rate limiting, domain filtering,
         content caching, and security headers modification.
         .
         Key features:
         - Domain allowlist/blocklist
         - Built-in caching with TTL support
         - Rate limiting per IP
         - CORS header injection
         - Tracking header removal
         - Systemd integration
        Homepage: https://github.com/thmasq/http-proxy-rs
        EOF

    - name: Build Debian package
      run: |
        dpkg-deb --build pkg http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb

    - name: Verify package
      run: |
        dpkg-deb --info http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        dpkg-deb --contents http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb

    - name: Test binary compatibility (optional)
      run: |
        # Create a simple test using the same base image as Debian 12
        cat > Dockerfile.test << 'EOF'
        FROM debian:bookworm-slim

        RUN apt-get update && apt-get install -y \
            ca-certificates \
            libssl3 \
            && rm -rf /var/lib/apt/lists/*

        COPY ./http-proxy-rs /usr/local/bin/http-proxy-rs
        RUN chmod +x /usr/local/bin/http-proxy-rs

        # Test that the binary can at least start and show help
        RUN /usr/local/bin/http-proxy-rs --help
        EOF
        
        echo "Testing binary compatibility with Debian 12 (bookworm)..."
        docker build -f Dockerfile.test -t http-proxy-test . && echo "✅ Binary is compatible with Debian 12!" || echo "❌ Binary may have compatibility issues"

    - name: Generate installation instructions
      run: |
        cat > installation-instructions.md << 'EOF'
        # Installation Instructions

        ## System Requirements
        - Debian 12 (Bookworm) or compatible
        - glibc 2.31 or later
        - libssl3 or libssl1.1

        ## Install the .deb package:
        ```bash
        wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        sudo dpkg -i http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb
        ```

        ## If you get dependency errors:
        ```bash
        sudo apt-get update
        sudo apt-get install -f
        ```

        ## Start the service:
        ```bash
        sudo systemctl start http-proxy-rs
        sudo systemctl enable http-proxy-rs
        ```

        ## Check status:
        ```bash
        sudo systemctl status http-proxy-rs
        sudo journalctl -u http-proxy-rs -f
        ```

        ## Configuration:
        Edit `/etc/http-proxy-rs/config.json` and restart the service.

        ## Usage:
        The proxy listens on port 8080 by default.
        Access: `http://localhost:8080/proxy/https://example.com`

        ## Uninstall:
        ```bash
        sudo apt remove http-proxy-rs
        # or to remove config files too:
        sudo apt purge http-proxy-rs
        ```

        ## Compatibility
        This package was built using rust:1.89-slim-bullseye to ensure compatibility 
        with Debian 12 and similar distributions.
        EOF

    - name: Upload release assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ steps.get_version.outputs.VERSION }} \
          http-proxy-rs_${{ steps.get_version.outputs.VERSION }}_amd64.deb \
          installation-instructions.md \
          --clobber

    - name: Clean up temporary files
      run: |
        rm -f Dockerfile.build Dockerfile.test
        docker image rm http-proxy-builder || true
        docker image rm http-proxy-test || true
